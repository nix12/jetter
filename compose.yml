networks:
  jetter-net:
    driver: bridge

volumes:
  pgdata:
  kongdata:

services:
  # Postgres database
  db:
    image: postgres:12
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - jetter-net
    ports:
      - "5433:5432"

  # Kong gateway database
  kong_db:
    image: postgres:9.6
    restart: always
    networks:
      - jetter-net
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    volumes:
      - kongdata:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Backend API's
  user_authentication_and_authorization:
    container_name: user_auth_api
    image: planetnix/jetter_user_auth:dev
    command: sh -c "rm -f tmp/pids/server.pid && bundle exec rails s -p 3000 -b '0.0.0.0'"
    restart: always
    ports:
      - "3001:3000"
    env_file: .env
    environment:
      - USER_AUTH_API_KEY=${USER_AUTH_MASTER_KEY}
    depends_on:
      - db
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - jetter-net

  forum_api:
    image: planetnix/jetter_forum:dev
    command: sh -c "rm -f tmp/pids/server.pid && bundle exec rails s -p 3000 -b '0.0.0.0'"
    restart: always
    ports:
      - "3002:3000"
    env_file: .env
    environment:
      - FORUM_API_KEY=${FORUM_MASTER_KEY}
    depends_on:
      - db
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - jetter-net

  # Kong API gateway
  kong:
    image: kong:1.4
    restart: always
    environment:
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PG_HOST: kong_db
      KONG_PG_PASSWORD: kong
      KONG_DATABASE: postgres
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_PROXY_LISTEN_SSL: 0.0.0.0:8443
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 5s
      timeout: 2s
      retries: 15
    depends_on:
      - kong_db
      - kong-migrations-up
    ports:
      - "8000:8000/tcp"
      - "8001:8001/tcp"
      - "8443:8443/tcp"
      - "8444:8444/tcp"
    networks:
      - jetter-net

  # Kong database migration
  kong-migrations:
    image: kong:1.4
    command: sh -c "kong migrations bootstrap"
    restart: on-failure
    environment:
      KONG_PG_HOST: kong_db
      KONG_PG_PASSWORD: kong
    depends_on:
      - kong_db
    networks:
      - jetter-net

  # Kong migrations up
  kong-migrations-up:
    image: kong:1.4
    command: sh -c "kong migrations up && kong migrations finish"
    depends_on:
      - kong_db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_HOST: kong_db
      KONG_PG_PASSWORD: kong
      KONG_PG_USER: kong
    networks:
      - jetter-net
    restart: on-failure

  # Frontend
  jetter-client:
    container_name: client
    image: planetnix/jetter_client:dev
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - jetter-net
    depends_on:
      - kong
    links:
      - kong
