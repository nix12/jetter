version: "3.6"

networks:
  jetter-net:
    driver: bridge

volumes:
  pgdata:
  kongdata:

services:
  # Postgres database
  db:
    image: postgres:12
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - jetter-net
    ports:
      - "5433:5432"

  # Kong gateway database
  kong_db:
    image: postgres:9.6
    restart: always
    networks:
      - jetter-net
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    volumes:
      - kongdata:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Backend API's
  user_authentication_and_authorization:
    container_name: user_auth_api
    build: ./user_authentication_and_authorization
    command: sh -c "rm -f tmp/pids/server.pid && bundle exec rails s -p 3000 -b '0.0.0.0'"
    restart: always
    ports:
      - "3001:3000"
    env_file: .env
    environment:
      - RAILS_MASTER_KEY=${RAILS_MASTER_KEY}
    depends_on:
      - db
    volumes:
      - ./user_authentication_and_authorization:/user_authentication_and_authorization
    networks:
      - jetter-net

  forum_api:
    build: ./forum_api
    command: sh -c "rm -f tmp/pids/server.pid && bundle exec rails s -p 3000 -b '0.0.0.0'"
    restart: always
    ports:
      - "3002:3000"
    env_file: .env
    environment:
      - RAILS_MASTER_KEY=${RAILS_MASTER_KEY2}
    depends_on:
      - db
    volumes:
      - ./forum_api:/forum_api
    networks:
      - jetter-net

  # Kong API gateway
  kong:
    build: ./kong
    restart: always
    environment:
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PG_HOST: kong_db
      KONG_PG_PASSWORD: kong
      KONG_DATABASE: postgres
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_PROXY_LISTEN_SSL: 0.0.0.0:8443
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      WAIT_HOSTS: db:5432, kong_db:5432
      WAIT_HOSTS_TIMEOUT: 120
      WAIT_SLEEP_INTERVAL: 15
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 5s
      timeout: 2s
      retries: 15
    depends_on:
      - kong_db
      - kong-migrations-up
    ports:
      - "8000:8000/tcp"
      - "8001:8001/tcp"
      - "8443:8443/tcp"
      - "8444:8444/tcp"
    networks:
      - jetter-net

  # Kong database migration
  kong-migrations:
    build: ./kong
    command: sh -c "/wait && kong migrations bootstrap"
    restart: on-failure
    environment:
      KONG_PG_HOST: kong_db
      KONG_PG_PASSWORD: kong
      WAIT_HOSTS: db:5432, kong_db:5432
      WAIT_HOSTS_TIMEOUT: 120
      WAIT_SLEEP_INTERVAL: 15
    depends_on:
      - kong_db
    networks:
      - jetter-net

  # Kong migrations up
  kong-migrations-up:
    build: ./kong
    command: sh -c "/wait && kong migrations up && kong migrations finish"
    depends_on:
      - kong_db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_HOST: kong_db
      KONG_PG_PASSWORD: kong
      KONG_PG_USER: kong
      WAIT_HOSTS: db:5432, kong_db:5432
      WAIT_HOSTS_TIMEOUT: 120
      WAIT_SLEEP_INTERVAL: 15
    networks:
      - jetter-net
    restart: on-failure

  # Frontend
  jetter-client:
    container_name: client
    build: ./jetter-client
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - ./jetter-client:/jetter-client
    networks:
      - jetter-net
    depends_on:
      - kong
    links:
      - kong

  #######################################
  # Konga database prepare
  #######################################
  konga-prepare:
    image: pantsel/konga:next
    command: "-c prepare -a postgres -u postgresql://kong:kong@kong_db:5432/konga_db"
    networks:
      - jetter-net
    environment:
      KONGA_HOOK_TIMEOUT: 120000
    restart: on-failure
    depends_on:
      - kong_db

  #######################################
  # Konga: Kong GUI
  #######################################
  konga:
    image: pantsel/konga:next
    restart: always
    networks:
      - jetter-net
    environment:
      DB_ADAPTER: postgres
      DB_HOST: kong_db
      DB_USER: kong
      DB_PASSWORD: kong
      TOKEN_SECRET: km1GUr4RkcQD7DewhJPNXrCuZwcKmqjb
      DB_DATABASE: konga_db
      NODE_ENV: production
      KONGA_HOOK_TIMEOUT: 120000
    depends_on:
      - kong_db
    ports:
      - "1337:1337"
